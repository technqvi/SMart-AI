CREATE OR REPLACE PROCEDURE `pongthorn.SMartDataAnalytics.merge_inventory`()
OPTIONS (description="merge solution")
BEGIN

declare upate_at_to timestamp DEFAULT CURRENT_TIMESTAMP() ;

BEGIN TRANSACTION;

MERGE pongthorn.SMartDataAnalytics.inventory AS m

USING pongthorn.SMartData_Temp.temp_inventory as t
ON m.inventory_id = t.inventory_id
 

WHEN MATCHED and t.action = 'deleted' THEN
    UPDATE SET m.is_deleted =True,m.update_at=upate_at_to

WHEN MATCHED and t.action = 'changed' THEN
  UPDATE SET 
  m.serial_number=t.serial_number
  ,m.customer_warranty_start=t.customer_warranty_start
  ,m.customer_warranty_end=t.customer_warranty_end
  ,m.brand=t.brand,m.model=t.model,m.product_type=t.product_type
  ,m.project_id=t.project_id
  ,m.is_deleted =False
  ,m.update_at=upate_at_to

WHEN NOT MATCHED BY TARGET THEN
  INSERT (inventory_id, serial_number
          ,customer_warranty_start, customer_warranty_end
          , brand, model,product_type
          ,project_id
          ,is_deleted,update_at) 

  VALUES(t.inventory_id, t.serial_number
          ,t.customer_warranty_start, t.customer_warranty_end
          , t.brand, t.model,t.product_type, 
          t.project_id
         ,False, upate_at_to)
;

truncate table  pongthorn.SMartData_Temp.temp_inventory;

 COMMIT TRANSACTION; 

EXCEPTION WHEN ERROR THEN
 select @@error.message,@@error.statement_text; 
 ROLLBACK TRANSACTION;

END;